name: Run supertokens-auth-react tests
description: |
  Will clone the `supertokens-auth-react` repo in it's own folder in the workspace directory.
  Expects:
  - `node` to be installed.
  - `auth-react-testing-action/setup` action was run.
  - `supertokens-core` to be running.
  - Optionally, an application server to be running on port 8083.

inputs:
  fdi-version:
    description: The FDI version to test for
    required: true

  check-name-suffix:
    description: Suffix to append to check names (usually matrix values)
    required: true

  path:
    description: Relative path where the repo will be cloned
    required: false
    default: supertokens-auth-react

runs:
  using: composite

  steps:
    - uses: bissolli/gh-action-persist-workspace@v2
      with:
        action: retrieve
        artifactName: auth-react-${{ inputs.fdi-version }}

    - name: Start auth-react test server
      working-directory: ${{ inputs.path }}/test/server/
      env:
        # Common
        APP_SERVER: ${{ env.AUTH_REACT__APP_SERVER }}
        NODE_PORT: ${{ env.AUTH_REACT__NODE_PORT }}
        TEST_MODE: ${{ env.AUTH_REACT__TEST_MODE }}
      shell: bash
      run: node . &> $AUTH_REACT__LOG_DIR/backend.log &

    - name: Start auth-react frontend application
      working-directory: ${{ inputs.path }}/examples/for-tests/
      env:
        # Common
        APP_SERVER: ${{ env.AUTH_REACT__APP_SERVER }}
        NODE_PORT: ${{ env.AUTH_REACT__NODE_PORT }}
        TEST_MODE: ${{ env.AUTH_REACT__TEST_MODE }}
        # Step-specific
        CI: true
        BROWSER: none
        PORT: ${{ env.AUTH_REACT__PORT }}
        REACT_APP_API_PORT: ${{ env.AUTH_REACT__APP_SERVER }}
      shell: bash
      run: npx react-scripts start &> $AUTH_REACT__LOG_DIR/frontend.log &

    - name: Wait for servers
      env:
        APP_SERVER: ${{ env.AUTH_REACT__APP_SERVER }}
        NODE_PORT: ${{ env.AUTH_REACT__NODE_PORT }}
        PORT: ${{ env.AUTH_REACT__PORT }}
      shell: bash
      run: |
        function wait-for() {
          timeout=90

          until [ $timeout -le 0 ] || (curl -s localhost:$1 &> /dev/null); do
            echo "Waiting for $2 (${1}) [${timeout}s remaining]"
            sleep 5
            timeout=$(( timeout - 5 ))
          done

          if [ $timeout -le 0 ]; then
            return 1
          fi
        }

        wait-for $PORT "frontend"
        wait-for $NODE_PORT "test server"
        wait-for $APP_SERVER "app server"

        timeout=10
        until [ $timeout -le 0 ] || (curl -s localhost:$1 &> /dev/null); do
          echo "Explicit wait to ensure things work fine [${timeout}s remaining]"
          sleep 5
          timeout=$(( timeout - 5 ))
        done

    - if: always()
      uses: mxschmitt/action-tmate@v3

    # - name: Run tests
    #   working-directory: ${{ inputs.path }}
    #   env:
    #     # Common
    #     APP_SERVER: ${{ env.AUTH_REACT__APP_SERVER }}
    #     NODE_PORT: ${{ env.AUTH_REACT__NODE_PORT }}
    #     TEST_MODE: ${{ env.AUTH_REACT__TEST_MODE }}
    #     # Step-specific
    #     SCREENSHOT_ROOT: ${{ env.AUTH_REACT__SCREENSHOT_DIR }}
    #   shell: bash
    #   run: npx mocha

    # - if: always()
    #   name: Fix paths
    #   working-directory: ${{ inputs.path }}
    #   shell: bash
    #   run: |
    #     # Doing it in the shell since the Reporter's `transformers` don't seem to work
    #     sed -i "s|${{ github.workspace }}/${{ inputs.path }}/test||g" test_report/test-results.xml

    #     # Make mochawesome screenshot paths relative. Workaround till we update it in auth-react.
    #     sed -i "s|$AUTH_REACT__SCREENSHOT_DIR|../screenshots|g" test_report/mochawesome/mochawesome.html

    # # TODO: Figure out a generic way to get the app server logs here too
    # - if: always()
    #   name: Upload artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: Auth React Tests ${{ inputs.check-name-suffix }}
    #     path: ${{ inputs.path }}/test_report

    # - if: always()
    #   name: Reporter
    #   # Alternative: dorny/test-reporter@v1 - does not create a summary
    #   uses: mikepenz/action-junit-report@v5
    #   with:
    #     report_paths: ${{ inputs.path }}/test_report/test-results.xml
    #     check_name: Auth React Tests ${{ inputs.check-name-suffix }}
    #     # Include table with all test results in the summary
    #     detailed_summary: true
    #     # Group the testcases by test suite in the detailed_summary
    #     group_suite: true
    #     # Fail if no test are found.
    #     require_tests: true
    #     # Fail the build in case of a test failure.
    #     fail_on_failure: true
